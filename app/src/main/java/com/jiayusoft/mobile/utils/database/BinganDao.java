package com.jiayusoft.mobile.utils.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table BINGAN.
 */
public class BinganDao extends AbstractDao<Bingan, String> {

    public static final String TABLENAME = "BINGAN";

    /**
     * Properties of entity Bingan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Biaoshima = new Property(0, String.class, "biaoshima", true, "BIAOSHIMA");
        public final static Property Binganhao = new Property(1, String.class, "binganhao", false, "BINGANHAO");
        public final static Property Zuzhidaima = new Property(2, String.class, "zuzhidaima", false, "ZUZHIDAIMA");
        public final static Property Zuzhiname = new Property(3, String.class, "zuzhiname", false, "ZUZHINAME");
        public final static Property Fenzhijigoubiaosi = new Property(4, String.class, "fenzhijigoubiaosi", false, "FENZHIJIGOUBIAOSI");
        public final static Property Xingming = new Property(5, String.class, "xingming", false, "XINGMING");
        public final static Property Chuyuankeshi = new Property(6, String.class, "chuyuankeshi", false, "CHUYUANKESHI");
        public final static Property Chuyuanshijian = new Property(7, String.class, "chuyuanshijian", false, "CHUYUANSHIJIAN");
        public final static Property Zhusu = new Property(8, String.class, "zhusu", false, "ZHUSU");
        public final static Property Shoucang = new Property(9, Boolean.class, "shoucang", false, "SHOUCANG");
        public final static Property Jieyue = new Property(10, Boolean.class, "jieyue", false, "JIEYUE");
    };


    public BinganDao(DaoConfig config) {
        super(config);
    }

    public BinganDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BINGAN' (" + //
                "'BIAOSHIMA' TEXT PRIMARY KEY NOT NULL ," + // 0: biaoshima
                "'BINGANHAO' TEXT," + // 1: binganhao
                "'ZUZHIDAIMA' TEXT," + // 2: zuzhidaima
                "'ZUZHINAME' TEXT," + // 3: zuzhiname
                "'FENZHIJIGOUBIAOSI' TEXT," + // 4: fenzhijigoubiaosi
                "'XINGMING' TEXT," + // 5: xingming
                "'CHUYUANKESHI' TEXT," + // 6: chuyuankeshi
                "'CHUYUANSHIJIAN' TEXT," + // 7: chuyuanshijian
                "'ZHUSU' TEXT," + // 8: zhusu
                "'SHOUCANG' INTEGER," + // 9: shoucang
                "'JIEYUE' INTEGER);"); // 10: jieyue
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BINGAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Bingan entity) {
        stmt.clearBindings();

        String biaoshima = entity.getBiaoshima();
        if (biaoshima != null) {
            stmt.bindString(1, biaoshima);
        }

        String binganhao = entity.getBinganhao();
        if (binganhao != null) {
            stmt.bindString(2, binganhao);
        }

        String zuzhidaima = entity.getZuzhidaima();
        if (zuzhidaima != null) {
            stmt.bindString(3, zuzhidaima);
        }

        String zuzhiname = entity.getZuzhiname();
        if (zuzhiname != null) {
            stmt.bindString(4, zuzhiname);
        }

        String fenzhijigoubiaosi = entity.getFenzhijigoubiaosi();
        if (fenzhijigoubiaosi != null) {
            stmt.bindString(5, fenzhijigoubiaosi);
        }

        String xingming = entity.getXingming();
        if (xingming != null) {
            stmt.bindString(6, xingming);
        }

        String chuyuankeshi = entity.getChuyuankeshi();
        if (chuyuankeshi != null) {
            stmt.bindString(7, chuyuankeshi);
        }

        String chuyuanshijian = entity.getChuyuanshijian();
        if (chuyuanshijian != null) {
            stmt.bindString(8, chuyuanshijian);
        }

        String zhusu = entity.getZhusu();
        if (zhusu != null) {
            stmt.bindString(9, zhusu);
        }

        Boolean shoucang = entity.getShoucang();
        if (shoucang != null) {
            stmt.bindLong(10, shoucang ? 1l: 0l);
        }

        Boolean jieyue = entity.getJieyue();
        if (jieyue != null) {
            stmt.bindLong(11, jieyue ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public Bingan readEntity(Cursor cursor, int offset) {
        Bingan entity = new Bingan( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // biaoshima
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // binganhao
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // zuzhidaima
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // zuzhiname
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fenzhijigoubiaosi
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // xingming
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // chuyuankeshi
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // chuyuanshijian
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // zhusu
                cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // shoucang
                cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0 // jieyue
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Bingan entity, int offset) {
        entity.setBiaoshima(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBinganhao(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setZuzhidaima(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setZuzhiname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFenzhijigoubiaosi(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setXingming(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setChuyuankeshi(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setChuyuanshijian(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setZhusu(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setShoucang(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setJieyue(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
    }

    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Bingan entity, long rowId) {
        return entity.getBiaoshima();
    }

    /** @inheritdoc */
    @Override
    public String getKey(Bingan entity) {
        if(entity != null) {
            return entity.getBiaoshima();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
